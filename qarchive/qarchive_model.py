# generated by datamodel-codegen:
#   filename:  qarchive_schema.json

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Optional, Sequence

from qarchive.qarchive_base import QArchiveBase


@dataclass
class ExternalChargeGridProperties(QArchiveBase):
    electrostatic_potential: Optional[Sequence[float]] = field(init=False, repr=False)
    electric_field: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class Properties(QArchiveBase):
    oscillator_strength: Optional[float] = field(init=False, repr=False)
    """
    The oscillator strength of the transition in the length gauge.
    """
    oscillator_strength_velocity: Optional[float] = field(init=False, repr=False)
    """
    The oscillator strength of the transition in the velocity gauge.
    """
    oscillator_strength_mixed: Optional[float] = field(init=False, repr=False)
    """
    The oscillator strength of the transition in the mixed gauge.
    """
    rotatory_strength: Optional[float] = field(init=False, repr=False)
    """
    The rotatory strength of the transition in the length gauge.
    """
    rotatory_strength_velocity: Optional[float] = field(init=False, repr=False)
    """
    The rotatory strength of the transition in the velocity gauge.
    """


@dataclass
class Thermodynamics(QArchiveBase):
    zpve: Optional[float] = field(init=False, repr=False)
    """
    Zero-point vibrational energy
    """
    temperature: Optional[float] = field(init=False, repr=False)
    """
    Temperature
    """
    pressure: Optional[float] = field(init=False, repr=False)
    """
    Pressure
    """
    enthalpy: Optional[float] = field(init=False, repr=False)
    """
    Total enthalpy
    """
    entropy: Optional[float] = field(init=False, repr=False)
    """
    Total entropy
    """


@dataclass
class MultipoleItem(QArchiveBase):
    order: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Order of Cartesian components for multipole matrix
    """
    matrix: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Matrix for specified component orders
    """


@dataclass
class Integrals(QArchiveBase):
    """
    Integrals of operators in the space of the one-electron basis
    """

    kinetic_energy: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-electron basis kinetic energy matrix
    """
    nuclear_attraction: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-electron basis nucleus-electron energy matrix
    """
    ecp: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-electron basis effective core potential matrix
    """
    core_hamiltonian: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Full core Hamiltonian matrix
    """
    multipole: Optional[Sequence[MultipoleItem]] = field(init=False, repr=False)
    """
    One-electron basis Cartesian multipole matrices
    """


@dataclass
class Aobasis(QArchiveBase):
    """
    One-electron Gaussian basis for describing electronic wavefunctions or densities
    """

    nshells: Optional[int] = field(init=False, repr=False)
    """
    Number of Gaussian shells in the one-electron basis
    """
    nprim: Optional[int] = field(init=False, repr=False)
    """
    Number of primitive Gaussian shells that comprise the basis
    """
    nbasis: Optional[int] = field(init=False, repr=False)
    """
    Number of basis functions
    """
    shell_types: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Angular momentum (s=0, p=1, etc., sp=-1)
    """
    shell_to_atom_map: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Index of atoms on which shells are centered (zero-based)
    """
    shell_coordinates: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Cartesian coordinates of Gaussian shells
    """
    primitives_per_shell: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Number of primitive Gaussians per shell
    """
    primitive_exponents: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Values of primitive Gaussian exponents
    """
    contraction_coefficients: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Values of primitive contraction coefficients
    """
    sp_contraction_coefficients: Optional[Sequence[float]] = field(
        init=False, repr=False
    )
    """
    Values of p-shell contraction coefficients in sp-shells, zero elsewhere
    """
    overlap_matrix: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-electron basis overlap matrix
    """
    orthonormalization_matrix: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-electron basis orthonormalization matrix X, satisfying X^{dagger}SX = 1
    """
    integrals: Optional[Integrals] = field(init=False, repr=False)
    """
    Integrals of operators in the space of the one-electron basis
    """


@dataclass
class DensityMatrix(QArchiveBase):
    nsets: Optional[int] = field(init=False, repr=False)
    """
    Number of density sets (for example, 1 for restricted, 2 for unrestricted)
    """
    includes_gs: Optional[bool] = field(init=False, repr=False)
    """
    Does this density matrix include a ground-state density added in?
    """
    opdm: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    One-particle density matrix
    """


class MecpAlgorithm(Enum):
    branching_plane = 'branching_plane'
    direct = 'direct'
    penalty_function = 'penalty_function'


@dataclass
class MecpState(QArchiveBase):
    spin: Optional[bool] = field(init=False, repr=False)
    irrep: Optional[int] = field(init=False, repr=False)
    state_within_irrep: Optional[int] = field(init=False, repr=False)


@dataclass
class IterItem3(QArchiveBase):
    algorithm: Optional[str] = field(init=False, repr=False)
    tolerance: Optional[float] = field(init=False, repr=False)
    energy: Optional[float] = field(init=False, repr=False)


@dataclass
class Cxscf(QArchiveBase):
    iter: Optional[Sequence[IterItem3]] = field(init=False, repr=False)


@dataclass
class DualbasisScf(QArchiveBase):
    aobasis_1: Optional[str] = field(init=False, repr=False)
    aobasis_2: Optional[str] = field(init=False, repr=False)
    iter: Optional[Sequence[IterItem3]] = field(init=False, repr=False)


@dataclass
class Mp2(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    ss_factor: Optional[float] = field(init=False, repr=False)
    os_factor: Optional[float] = field(init=False, repr=False)
    energy: Optional[float] = field(init=False, repr=False)


@dataclass
class IterItem6(QArchiveBase):
    energy: Optional[float] = field(init=False, repr=False)


@dataclass
class Ccsd(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    iter: Optional[Sequence[IterItem6]] = field(init=False, repr=False)


@dataclass
class Cis(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    amplitudes_alpha: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, alpha spin or restricted
    """
    amplitudes_beta: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, beta spin
    """
    amplitudes_quartet: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, next highest spin multiplicity in restricted open-shell theory (e.g. septet from quintet reference or sextet from quartet reference)
    """


@dataclass
class Xcis(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    amplitudes_alpha: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, alpha spin
    """
    amplitudes_beta: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, beta spin
    """
    amplitudes_doubles: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, 5th term in eq. (4) of DOI:10.1021/jp952754j
    """
    total_doubles_character: Optional[float] = field(init=False, repr=False)


@dataclass
class Rpa(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    amplitudes_x_alpha: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function
    """
    amplitudes_y_alpha: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Deexcitation amplitudes from this energy function to the reference energy function
    """
    amplitudes_x_beta: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function
    """
    amplitudes_y_beta: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Deexcitation amplitudes from this energy function to the reference energy function
    """


@dataclass
class Sfcis(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    amplitudes: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Excitation amplitudes from the reference energy function to this energy function, spin flips from alpha to beta space
    """


@dataclass
class Sfxcis(QArchiveBase):
    reference_ef: Optional[int] = field(init=False, repr=False)
    """
    Energy function number that serves as the reference for this energy function
    """
    amplitudes_ss: Optional[Sequence[float]] = field(init=False, repr=False)
    amplitudes_os: Optional[Sequence[float]] = field(init=False, repr=False)
    amplitudes_sv: Optional[Sequence[float]] = field(init=False, repr=False)
    amplitudes_sov: Optional[Sequence[float]] = field(init=False, repr=False)
    amplitudes_dd: Optional[Sequence[float]] = field(init=False, repr=False)
    amplitudes_cd: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class Mcscf(QArchiveBase):
    nstates: Optional[int] = field(init=False, repr=False)


@dataclass
class MultipoleMoments(QArchiveBase):
    charge: Optional[float] = field(init=False, repr=False)
    dipole: Optional[Sequence[float]] = field(init=False, repr=False)
    quadrupole: Optional[Sequence[float]] = field(init=False, repr=False)
    octopole: Optional[Sequence[float]] = field(init=False, repr=False)
    hexadecapole: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class Frequency(QArchiveBase):
    frequency: Optional[float] = field(init=False, repr=False)
    """
    Frequency of oscillating incident field the polarizability is calculated at; for a static field, this is zero
    """
    tensor: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Field-dependent polarizability
    """


@dataclass
class Polarizabilities(QArchiveBase):
    """
    Field-dependent polarizabilities
    """

    frequencies: Optional[Sequence[Frequency]] = field(init=False, repr=False)
    """
    Polarizability results, one for each frequency
    """


@dataclass
class Center(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    term_dso: Optional[Sequence[float]] = field(init=False, repr=False)
    term_pso_unperturbed: Optional[Sequence[float]] = field(init=False, repr=False)
    term_pso_perturbed: Optional[Sequence[float]] = field(init=False, repr=False)
    total: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class ReferenceTypeItem(QArchiveBase):
    element: Optional[int] = field(init=False, repr=False)
    system: Optional[str] = field(init=False, repr=False)
    method: Optional[str] = field(init=False, repr=False)
    basis: Optional[str] = field(init=False, repr=False)
    geometry: Optional[str] = field(init=False, repr=False)
    shift: Optional[float] = field(init=False, repr=False)
    offset: Optional[float] = field(init=False, repr=False)


@dataclass
class References(QArchiveBase):
    reference_type: Optional[Sequence[ReferenceTypeItem]] = field(
        init=False, repr=False
    )


@dataclass
class NmrShieldings(QArchiveBase):
    centers: Optional[Sequence[Center]] = field(init=False, repr=False)
    references: Optional[References] = field(init=False, repr=False)


@dataclass
class CenterPair(QArchiveBase):
    pair: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    The two atom numbers for which coupling terms are computed for
    """
    term_fc: Optional[Sequence[float]] = field(init=False, repr=False)
    term_sd: Optional[Sequence[float]] = field(init=False, repr=False)
    term_sdfc: Optional[Sequence[float]] = field(init=False, repr=False)
    term_pso: Optional[Sequence[float]] = field(init=False, repr=False)
    term_dso: Optional[Sequence[float]] = field(init=False, repr=False)
    total: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class Issc(QArchiveBase):
    center_pairs: Optional[Sequence[CenterPair]] = field(init=False, repr=False)


@dataclass
class Nucleus(QArchiveBase):
    atom_number: Optional[int] = field(init=False, repr=False)
    isotope: Optional[int] = field(init=False, repr=False)
    """
    Isotope (used in nuclear spin and magnetic moment)
    """
    spin: Optional[float] = field(init=False, repr=False)
    """
    Nuclear spin (used in nuclear g-factor)
    """
    magnetic_moment: Optional[float] = field(init=False, repr=False)
    """
    Nuclear magnetic moment (used in nuclear g-factor)
    """
    g_factor: Optional[float] = field(init=False, repr=False)
    """
    Nuclear g-factor (used in prefactor)
    """
    term_fc: Optional[float] = field(init=False, repr=False)
    """
    Fermi contact term, eq. (127) in DOI:10.1016/j.ccr.2008.05.014
    """
    term_sd: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Electron spin--nuclear spin dipole term, eq. (128) in DOI:10.1016/j.ccr.2008.05.014
    """
    term_soc: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Spin-orbit coupling term, eq. (129) in DOI:10.1016/j.ccr.2008.05.014
    """
    total: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Full hyperfine interaction tensor: sum of available FC, SD, and SOC terms
    """
    isotropic: Optional[float] = field(init=False, repr=False)
    """
    Isotropic part of the full hyperfine interaction tensor
    """
    total_principal_components: Optional[Sequence[float]] = field(
        init=False, repr=False
    )
    """
    Principal components of the full hyperfine interaction tensor
    """
    total_orientation: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Orientation of the full hyperfine interaction tensor
    """


@dataclass
class Hyperfine(QArchiveBase):
    nuclei: Optional[Sequence[Nucleus]] = field(init=False, repr=False)


@dataclass
class Observables(QArchiveBase):
    multipole_moments: Optional[MultipoleMoments] = field(init=False, repr=False)
    polarizabilities: Optional[Polarizabilities] = field(init=False, repr=False)
    """
    Field-dependent polarizabilities
    """
    nmr_shieldings: Optional[NmrShieldings] = field(init=False, repr=False)
    issc: Optional[Issc] = field(init=False, repr=False)
    hyperfine: Optional[Hyperfine] = field(init=False, repr=False)
    efg: Optional[float] = field(init=False, repr=False)


@dataclass
class PointGroupSymmetry(QArchiveBase):
    group_name: Optional[str] = field(init=False, repr=False)
    """
    Name of the point group
    """
    nirreps: Optional[int] = field(init=False, repr=False)
    """
    Number of irreducible representations
    """
    irreps: Optional[Sequence[str]] = field(init=False, repr=False)
    """
    Labels of irreducible representations
    """


@dataclass
class ExternalCharges(QArchiveBase):
    ncharges: Optional[int] = field(init=False, repr=False)
    """
    Number of external point charges
    """
    coordinates: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Cartesian coordinates of external point charges
    """
    charges: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Amount of charge at each point (can be positive or negative)
    """


@dataclass
class Structure(QArchiveBase):
    """
    Description of the molecular system
    """

    natoms: Optional[int] = field(init=False, repr=False)
    """
    Number of atoms in the molecular structure
    """
    charge: Optional[int] = field(init=False, repr=False)
    """
    Total charge of the system: neutral, positive or negative
    """
    nalpha: Optional[int] = field(init=False, repr=False)
    """
    Number of alpha electrons in the system
    """
    nbeta: Optional[int] = field(init=False, repr=False)
    """
    Number of beta electrons in the system
    """
    coordinates: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Cartesian coordinates of atoms in the molecular structure
    """
    nuclei: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Element numbers of atoms in the molecular structure (1=H, 2=He, etc.)
    """
    point_group_symmetry: Optional[PointGroupSymmetry] = field(init=False, repr=False)
    external_charges: Optional[ExternalCharges] = field(init=False, repr=False)


class AtomicChargesTheory(Enum):
    mulliken = 'mulliken'
    lowdin = 'lowdin'
    chelpg = 'chelpg'
    hirshfeld = 'hirshfeld'
    cm5 = 'cm5'
    stewart = 'stewart'
    nbo = 'nbo'
    merz_kollman_esp = 'merz_kollman_esp'
    merz_kollman_resp = 'merz_kollman_resp'


class Coordinate(Enum):
    X = 'X'
    Y = 'Y'
    Z = 'Z'


class PerturbationType(Enum):
    electric = 'electric'
    magnetic = 'magnetic'
    geometric = 'geometric'


class VibrationalAnalysisTheory(Enum):
    harmonic = 'harmonic'
    tosh = 'tosh'
    vpt2 = 'vpt2'
    vci = 'vci'


class MolecularOrbitalType(Enum):
    scf = 'scf'
    edmiston_ruedenberg = 'edmiston_ruedenberg'
    boys = 'boys'
    pipek_mezey = 'pipek_mezey'
    oslo = 'oslo'
    dyson = 'dyson'
    sdhg2005 = 'sdhg2005'
    ibo = 'ibo'


@dataclass
class Operator(QArchiveBase):
    multipole_moments: Optional[MultipoleMoments] = field(init=False, repr=False)
    dipole_velocity: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class TransitionItem(QArchiveBase):
    state_numbers: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    The two energy function numbers between which transition properties are computed
    """
    ediff: Optional[float] = field(init=False, repr=False)
    """
    The difference in energy between the second and first energy function in the transition.
    """
    density: Optional[DensityMatrix] = field(init=False, repr=False)
    properties: Optional[Properties] = field(init=False, repr=False)
    operators: Optional[Sequence[Operator]] = field(init=False, repr=False)


@dataclass
class VibrationalItem(QArchiveBase):
    theory: Optional[VibrationalAnalysisTheory] = field(init=False, repr=False)
    natoms: Optional[int] = field(init=False, repr=False)
    """
    Number of atoms included in vibrational analysis
    """
    atoms: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Indices of atoms included in vibrational analysis
    """
    atomic_masses: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Isotopic masses of atoms included in vibrational analysis
    """
    nmodes: Optional[int] = field(init=False, repr=False)
    """
    Number of vibrational modes in analysis
    """
    frequencies: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Vibrational frequencies
    """
    modes: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Vibrational modes
    """
    ir_intensities: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    IR intensities of vibrational modes
    """
    raman_intensities: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Raman intensities of vibrational modes
    """
    thermodynamics: Optional[Thermodynamics] = field(init=False, repr=False)


@dataclass
class AtomicCharge(QArchiveBase):
    theory: Optional[AtomicChargesTheory] = field(init=False, repr=False)
    charges: Optional[Sequence[float]] = field(init=False, repr=False)
    spin: Optional[Sequence[float]] = field(init=False, repr=False)


@dataclass
class MolecularOrbitals(QArchiveBase):
    kind: Optional[MolecularOrbitalType] = field(init=False, repr=False)
    norb: Optional[int] = field(init=False, repr=False)
    """
    Number of molecular orbitals
    """
    nsets: Optional[int] = field(init=False, repr=False)
    """
    Number of MO sets (1 for restricted, 2 for unrestricted)
    """
    mo_coefficients: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Molecular orbital coefficients
    """
    mo_energies: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Molecular orbital energies
    """
    mo_irreps: Optional[Sequence[int]] = field(init=False, repr=False)
    """
    Irreducible representations of molecular orbitals, see also point_group_symmetry
    """


@dataclass
class LocalizedOrbital(QArchiveBase):
    molecular_orbitals: Optional[MolecularOrbitals] = field(init=False, repr=False)


@dataclass
class Analysis(QArchiveBase):
    vibrational: Optional[Sequence[VibrationalItem]] = field(init=False, repr=False)
    atomic_charges: Optional[Sequence[AtomicCharge]] = field(init=False, repr=False)
    localized_orbitals: Optional[Sequence[LocalizedOrbital]] = field(
        init=False, repr=False
    )


@dataclass
class Scf(QArchiveBase):
    iter: Optional[Sequence[IterItem3]] = field(init=False, repr=False)
    molecular_orbitals: Optional[MolecularOrbitals] = field(init=False, repr=False)


@dataclass
class Methods(QArchiveBase):
    scf: Optional[Scf] = field(init=False, repr=False)
    cxscf: Optional[Cxscf] = field(init=False, repr=False)
    dualbasis_scf: Optional[DualbasisScf] = field(init=False, repr=False)
    mp2: Optional[Mp2] = field(init=False, repr=False)
    ccsd: Optional[Ccsd] = field(init=False, repr=False)
    cis: Optional[Cis] = field(init=False, repr=False)
    xcis: Optional[Xcis] = field(init=False, repr=False)
    rpa: Optional[Rpa] = field(init=False, repr=False)
    sfcis: Optional[Sfcis] = field(init=False, repr=False)
    sfxcis: Optional[Sfxcis] = field(init=False, repr=False)
    mcscf: Optional[Mcscf] = field(init=False, repr=False)


@dataclass
class EnergyFunctionItem(QArchiveBase):
    method: Optional[Methods] = field(init=False, repr=False)
    irrep: Optional[int] = field(init=False, repr=False)
    """
    The irreducible representation of the state computed by this energy function
    """
    target_spin_multiplicity: Optional[int] = field(init=False, repr=False)
    """
    Requested spin multiplicity of the state (2S + 1); a negative value is excess beta electrons
    """
    deriv_level: Optional[int] = field(init=False, repr=False)
    """
    Derivative order with respect to geometric perturbations: 0 is energy, 1 is gradient, 2 is Hessian, ...
    """
    energy: Optional[float] = field(init=False, repr=False)
    gradient: Optional[Sequence[float]] = field(init=False, repr=False)
    hessian: Optional[Sequence[float]] = field(init=False, repr=False)
    density_matrix: Optional[DensityMatrix] = field(init=False, repr=False)
    observables: Optional[Observables] = field(init=False, repr=False)
    analysis: Optional[Analysis] = field(init=False, repr=False)
    s2: Optional[float] = field(init=False, repr=False)
    external_charge_grid_properties: Optional[ExternalChargeGridProperties] = field(
        init=False, repr=False
    )


@dataclass
class JobItem(QArchiveBase):
    sp: Optional[Sp] = field(init=False, repr=False)
    geom_opt: Optional[GeomOpt] = field(init=False, repr=False)
    molecular_dynamics: Optional[MolecularDynamics] = field(init=False, repr=False)
    reaction_path: Optional[ReactionPath] = field(init=False, repr=False)
    pes_scan: Optional[PesScan] = field(init=False, repr=False)
    mecp: Optional[Mecp] = field(init=False, repr=False)
    fsm: Optional[Fsm] = field(init=False, repr=False)


@dataclass
class QArchive(QArchiveBase):
    """
    The Q-Chem Archive file
    """

    job: Optional[Sequence[JobItem]] = field(init=False, repr=False)


@dataclass
class Node(QArchiveBase):
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Fsm(QArchiveBase):
    algorithm: Optional[str] = field(init=False, repr=False)
    string: Optional[int] = field(init=False, repr=False)
    nodes: Optional[Sequence[Node]] = field(init=False, repr=False)


@dataclass
class IterItem(QArchiveBase):
    target_energy: Optional[float] = field(init=False, repr=False)
    """
    The energy during geometry optimization convergence check for the target energy function.
    """
    max_grad_val: Optional[float] = field(init=False, repr=False)
    """
    Max absolute gradient component during geomerty optimization convergence check.
    """
    max_disp_val: Optional[float] = field(init=False, repr=False)
    """
    Max absolute displacement component during geomerty optimization convergence check.
    """
    energy_change: Optional[float] = field(init=False, repr=False)
    """
    Energy difference between geometry optimization steps during geometry optimization convergence check.
    """
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class GeomOpt(QArchiveBase):
    algorithm: Optional[str] = field(init=False, repr=False)
    iter: Optional[Sequence[IterItem]] = field(init=False, repr=False)


@dataclass
class StepItem(QArchiveBase):
    state1: Optional[MecpState] = field(init=False, repr=False)
    state2: Optional[MecpState] = field(init=False, repr=False)
    ediff: Optional[float] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Mecp(QArchiveBase):
    algorithm: Optional[MecpAlgorithm] = field(init=False, repr=False)
    state_of_interest_1: Optional[MecpState] = field(init=False, repr=False)
    state_of_interest_2: Optional[MecpState] = field(init=False, repr=False)
    step: Optional[Sequence[StepItem]] = field(init=False, repr=False)


@dataclass
class TimeStepItem(QArchiveBase):
    coordinates: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Cartesian coordinates of atoms in the molecular structure
    """
    velocity: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Velocities of atoms in the molecular structure
    """
    box: Optional[Sequence[float]] = field(init=False, repr=False)
    """
    Size of a simulation box
    """
    time: Optional[float] = field(init=False, repr=False)
    """
    Simulation time in the current frame
    """
    temperature: Optional[float] = field(init=False, repr=False)
    """
    Current average temperature
    """
    pressure: Optional[float] = field(init=False, repr=False)
    """
    Current average pressure
    """
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class MolecularDynamics(QArchiveBase):
    natoms: Optional[int] = field(init=False, repr=False)
    """
    Number of atoms in the molecular structure
    """
    time_step: Optional[Sequence[TimeStepItem]] = field(init=False, repr=False)


@dataclass
class StepItem1(QArchiveBase):
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Frozen(QArchiveBase):
    step: Optional[Sequence[StepItem1]] = field(init=False, repr=False)


@dataclass
class IterItem1(QArchiveBase):
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class StepItem2(QArchiveBase):
    iter: Optional[Sequence[IterItem1]] = field(init=False, repr=False)


@dataclass
class Restrained(QArchiveBase):
    step: Optional[Sequence[StepItem2]] = field(init=False, repr=False)


@dataclass
class StepItem3(QArchiveBase):
    iter: Optional[Sequence[IterItem1]] = field(init=False, repr=False)


@dataclass
class Relaxed(QArchiveBase):
    step: Optional[Sequence[StepItem3]] = field(init=False, repr=False)


@dataclass
class PesScan(QArchiveBase):
    frozen: Optional[Frozen] = field(init=False, repr=False)
    restrained: Optional[Restrained] = field(init=False, repr=False)
    relaxed: Optional[Relaxed] = field(init=False, repr=False)


@dataclass
class DirectionItem(QArchiveBase):
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class ReactionPath(QArchiveBase):
    direction: Optional[Sequence[DirectionItem]] = field(init=False, repr=False)


@dataclass
class Atom(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Hirshfeld(QArchiveBase):
    atoms: Optional[Sequence[Atom]] = field(init=False, repr=False)


@dataclass
class Fragment(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Aifdem(QArchiveBase):
    fragments: Optional[Sequence[Fragment]] = field(init=False, repr=False)


@dataclass
class Tetramer(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Exciton(QArchiveBase):
    fragments: Optional[Sequence[Fragment]] = field(init=False, repr=False)
    tetramers: Optional[Sequence[Tetramer]] = field(init=False, repr=False)


@dataclass
class Monomer(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Dimer(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Trimer(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Xsapt(QArchiveBase):
    atoms: Optional[Sequence[Atom]] = field(init=False, repr=False)
    monomers: Optional[Sequence[Monomer]] = field(init=False, repr=False)
    dimers: Optional[Sequence[Dimer]] = field(init=False, repr=False)
    trimers: Optional[Sequence[Trimer]] = field(init=False, repr=False)


@dataclass
class SuperItem(QArchiveBase):
    number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Fde(QArchiveBase):
    super: Optional[Sequence[SuperItem]] = field(init=False, repr=False)
    monomers: Optional[Sequence[Monomer]] = field(init=False, repr=False)


@dataclass
class Sp(QArchiveBase):
    """
    Single point molecular electronic structure computation
    """

    structure: Optional[Structure] = field(init=False, repr=False)
    aobasis: Optional[Aobasis] = field(init=False, repr=False)
    energy_function: Optional[Sequence[EnergyFunctionItem]] = field(
        init=False, repr=False
    )
    """
    Point on a potential energy surface
    """
    transition: Optional[Sequence[TransitionItem]] = field(init=False, repr=False)
    fdiff: Optional[Fdiff] = field(init=False, repr=False)
    hirshfeld: Optional[Hirshfeld] = field(init=False, repr=False)
    aifdem: Optional[Aifdem] = field(init=False, repr=False)
    exciton: Optional[Exciton] = field(init=False, repr=False)
    xsapt: Optional[Xsapt] = field(init=False, repr=False)
    fde: Optional[Fde] = field(init=False, repr=False)


@dataclass
class StepItem4(QArchiveBase):
    strength: Optional[float] = field(init=False, repr=False)
    coord: Optional[Coordinate] = field(init=False, repr=False)
    atom_number: Optional[int] = field(init=False, repr=False)
    sp: Optional[Sp] = field(init=False, repr=False)


@dataclass
class Fdiff(QArchiveBase):
    ideriv: Optional[int] = field(init=False, repr=False)
    ptype: Optional[PerturbationType] = field(init=False, repr=False)
    step: Optional[Sequence[StepItem4]] = field(init=False, repr=False)
